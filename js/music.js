import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";

const supabaseUrl = "https://calwzopyjitbtahiafzw.supabase.co";
const SUPABASE_ANON_KEY =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNhbHd6b3B5aml0YnRhaGlhZnp3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkxNjgyOTAsImV4cCI6MjA2NDc0NDI5MH0.lFDePS6m0MpNXDcC43dJaqa1pHtCKHNRKoiDbnxTBBc";

const supabase = createClient(supabaseUrl, SUPABASE_ANON_KEY);

let currentUser = null;
let currentUserRole = "guest";

document.addEventListener("DOMContentLoaded", async () => {
  // DOM elements
  const mainMenu = document.getElementById("mainMenu");
  const playlistContainer = document.getElementById("playlistContainer");
  const backBtn = document.getElementById("backBtn");
  const controlsContainer = document.getElementById("controlsContainer");
  const musicPlayer = document.getElementById("musicPlayer");
  const currentSongTitle = document.getElementById("currentSongTitle");
  const pauseResumeBtn = document.getElementById("pauseResumeBtn");
  const prevBtn = document.getElementById("prevBtn");
  const nextBtn = document.getElementById("nextBtn");
  const repeatBtn = document.getElementById("repeatBtn");
  const shuffleBtn = document.getElementById("shuffleBtn");
  const progressBar = document.getElementById("progressBar");
  const currentTimeDisplay = document.getElementById("currentTime");
  const durationDisplay = document.getElementById("duration");
  const canvas = document.getElementById("volumeCanvas");
  const ctx = canvas.getContext("2d");
  const eraserBtn = document.getElementById("eraserBtn");

  // State variables
  let navigationStack = [];
  let currentPlaylist = [];
  let currentIndex = 0;
  let isRepeat = false;
  let isShuffle = false;
  let isDrawing = false;
  let erasing = false;
  let controlsShownOnce = false;
  // Ki·ªÉm tra phi√™n ƒëƒÉng nh·∫≠p
  async function checkUserRole() {
    const {
      data: { session },
    } = await supabase.auth.getSession();
    currentUser = session?.user ?? null;

    if (!currentUser) {
      currentUserRole = "guest";
      console.log("üü° Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p (guest).");
    } else {
      currentUserRole = currentUser.user_metadata?.role || "user";
      console.log(
        currentUserRole === "admin"
          ? "üî¥ Ng∆∞·ªùi d√πng l√† Admin."
          : "üü¢ Ng∆∞·ªùi d√πng l√† User th∆∞·ªùng."
      );
    }
  }

  // H√†m t·∫°o playlist
  async function createPlaylist(name) {
    if (!currentUser) {
      alert("Ch·ª©c nƒÉng n√†y ch·ªâ d√†nh cho ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p.");
      return;
    }

    const { data, error } = await supabase.from("playlist").insert([
      {
        name,
        user_id: currentUser.id, // Supabase auth ID
      },
    ]);

    if (error) {
      alert("L·ªói khi t·∫°o playlist.");
      console.error(error);
    } else {
      alert("ƒê√£ t·∫°o playlist th√†nh c√¥ng!");
      loadMainMenu(); // Reload l·∫°i menu ch√≠nh
    }
  }

  // H√†m t·∫£i menu ch√≠nh (4 lo·∫°i category)
  async function loadMainMenu() {
    mainMenu.innerHTML = "";
    mainMenu.style.display = "flex";
    playlistContainer.style.display = "none";

    // Ch·ª©c nƒÉng t·∫°o playlist
    if (currentUserRole !== "guest") {
      const createBtn = document.createElement("button");
      createBtn.textContent = "‚ûï T·∫°o playlist m·ªõi";
      createBtn.className = "main-category-button";
      createBtn.addEventListener("click", () => {
        const playlistName = prompt("Nh·∫≠p t√™n playlist:");
        if (playlistName?.trim()) createPlaylist(playlistName.trim());
      });
      mainMenu.appendChild(createBtn);
    }

    // Ch·ªâ ·∫©n controls l·∫ßn ƒë·∫ßu ti√™n v√†o menu ch√≠nh
    if (!controlsShownOnce) {
      controlsContainer.style.display = "none";
    }

    backBtn.style.display = "none";

    // Danh s√°ch category
    const categories = [
      { emoji: "üé§", label: "Ngh·ªá sƒ©", type: "artist" },
      { emoji: "üéß", label: "Th·ªÉ lo·∫°i", type: "genre" },
      { emoji: "üåç", label: "Khu v·ª±c", type: "region" },
      { emoji: "üìÇ", label: "Playlist ng∆∞·ªùi d√πng", type: "playlist" },
    ];

    categories.forEach(({ emoji, label, type }) => {
      const btn = document.createElement("button");
      btn.className = "main-category-button";
      btn.textContent = `${emoji} ${label}`;
      btn.addEventListener("click", () =>
        loadCategory(type, `${emoji} ${label}`)
      );
      mainMenu.appendChild(btn);
    });

    navigationStack = []; // Reset stack khi v√†o menu ch√≠nh
  }

  // H√†m load danh s√°ch category t·ª´ Supabase theo lo·∫°i (artist, genre, region, playlist)
  async function loadCategory(type, displayTitle) {
    mainMenu.innerHTML = "";
    mainMenu.style.display = "flex";
    playlistContainer.style.display = "none";
    backBtn.style.display = "inline-block";

    // ƒê·∫©y view hi·ªán t·∫°i v√†o navigation stack ƒë·ªÉ quay l·∫°i
    navigationStack.push({ view: "main" });

    const { data, error } = await supabase.from(type).select("id, name");

    if (type === "playlist") {
      if (currentUserRole === "guest") {
        mainMenu.innerHTML = `<p>Kh√¥ng kh·∫£ d·ª•ng ·ªü phi√™n ƒëƒÉng nh·∫≠p l√† guest.</p>`;
        return;
      }

      const { data, error } = await supabase
        .from("playlist")
        .select("id, name")
        .eq("user_id", currentUser.id);

      if (error) {
        mainMenu.innerHTML = `<p>L·ªói t·∫£i d·ªØ li·ªáu playlist c·ªßa b·∫°n.</p>`;
        console.error(error);
        return;
      }

      if (!data || data.length === 0) {
        mainMenu.innerHTML = `<p>B·∫°n ch∆∞a c√≥ playlist n√†o.</p>`;
        return;
      }

      data.forEach((item) => {
        const btn = document.createElement("button");
        btn.className = "category-item";
        btn.textContent = item.name;
        btn.addEventListener("click", () =>
          loadSongsByCategory("playlist", item.id, item.name)
        );
        mainMenu.appendChild(btn);
      });

      return;
    }

    if (error) {
      mainMenu.innerHTML = `<p>L·ªói t·∫£i d·ªØ li·ªáu ${displayTitle}. Vui l√≤ng th·ª≠ l·∫°i.</p>`;
      console.error(error);
      return;
    }

    if (!data || data.length === 0) {
      mainMenu.innerHTML = `<p>Kh√¥ng c√≥ d·ªØ li·ªáu cho ${displayTitle}.</p>`;
      return;
    }

    data.forEach((item) => {
      const btn = document.createElement("button");
      btn.className = "category-item";
      btn.textContent = item.name;
      btn.addEventListener("click", () =>
        loadSongsByCategory(type, item.id, item.name)
      );
      mainMenu.appendChild(btn);
    });
  }

  // H√†m load b√†i h√°t theo category (artist_id, genre_id, region_id, playlist_id)
  async function loadSongsByCategory(type, id, displayName) {
    mainMenu.style.display = "none";
    playlistContainer.style.display = "block";
    backBtn.style.display = "inline-block";

    playlistContainer.innerHTML = `<h3>${displayName} - Danh s√°ch b√†i h√°t</h3>`;

    // ƒê·∫©y view hi·ªán t·∫°i v√†o navigation stack ƒë·ªÉ quay l·∫°i
    navigationStack.push({ view: "category", type, displayTitle: displayName });

    // Map ƒë·ªÉ x√°c ƒë·ªãnh c·ªôt l·ªçc trong b·∫£ng music_data
    const columnMap = {
      artist: "artist_id",
      genre: "genre_id",
      region: "region_id",
      playlist: "playlist_id",
    };
    const filterColumn = columnMap[type];

    // Truy v·∫•n b√†i h√°t v·ªõi li√™n k·∫øt c√°c b·∫£ng artist, genre, region
    const { data, error } = await supabase
      .from("music_data")
      .select(
        "id, song_name, url, artist:artist(name), genre:genre(name), region:region(name)"
      )
      .eq(filterColumn, id);

    if (error) {
      playlistContainer.innerHTML += `<p>L·ªói t·∫£i b√†i h√°t. Vui l√≤ng th·ª≠ l·∫°i.</p>`;
      console.error(error);
      return;
    }

    if (!data || data.length === 0) {
      playlistContainer.innerHTML += `<p>Kh√¥ng c√≥ b√†i h√°t n√†o trong m·ª•c n√†y.</p>`;
      return;
    }

    if (type === "playlist" && currentUserRole !== "guest") {
      const addBtn = document.createElement("button");
      addBtn.textContent = "‚ûï Th√™m b√†i h√°t v√†o playlist n√†y";
      addBtn.addEventListener("click", async () => {
        const songName = prompt("T√™n b√†i h√°t:");
        const songUrl = prompt("URL b√†i h√°t:");

        if (songName && songUrl) {
          const { error } = await supabase.from("music_data").insert([
            {
              song_name: songName,
              url: songUrl,
              playlist_id: id,
              user_id: currentUser.id, // n·∫øu b·∫£ng c√≥ c·ªôt n√†y
            },
          ]);

          if (error) {
            alert("Kh√¥ng th√™m ƒë∆∞·ª£c b√†i h√°t.");
            console.error(error);
          } else {
            alert("ƒê√£ th√™m b√†i h√°t!");
            loadSongsByCategory("playlist", id, displayName); // reload
          }
        }
      });

      playlistContainer.appendChild(addBtn);
    }

    currentPlaylist = data;
    currentIndex = 0;

    data.forEach((song, index) => {
      const btn = document.createElement("button");
      btn.className = "song-button";
      btn.textContent = `${song.song_name}`;
      btn.addEventListener("click", () => {
        currentIndex = index;
        playSong(currentIndex);
      });
      playlistContainer.appendChild(btn);
    });
  }

  // H√†m play b√†i h√°t theo index trong currentPlaylist
  function playSong(index) {
    const song = currentPlaylist[index];
    if (!song) return;

    musicPlayer.src = song.url;
    const artistName = song.artist?.name || "Kh√¥ng r√µ ngh·ªá sƒ©";
    currentSongTitle.textContent = `${song.song_name} - ${artistName}`;

    musicPlayer.play().catch((e) => {
      console.error("L·ªói ph√°t nh·∫°c:", e);
      alert("Kh√¥ng th·ªÉ ph√°t b√†i h√°t n√†y.");
    });

    pauseResumeBtn.textContent = "‚è∏";

    // Hi·ªán controls khi play l·∫ßn ƒë·∫ßu
    if (!controlsShownOnce) {
      controlsContainer.style.display = "block";
      controlsShownOnce = true;
    }
  }

  // N√∫t t·∫°m d·ª´ng / ph√°t l·∫°i
  pauseResumeBtn.addEventListener("click", () => {
    if (musicPlayer.paused) {
      musicPlayer.play();
      pauseResumeBtn.textContent = "‚è∏";
    } else {
      musicPlayer.pause();
      pauseResumeBtn.textContent = "‚ñ∂";
    }
  });

  // Khi b√†i h√°t k·∫øt th√∫c
  musicPlayer.addEventListener("ended", () => {
    if (isRepeat) {
      playSong(currentIndex);
    } else {
      playNextSong();
    }
  });

  // N√∫t prev / next
  prevBtn.addEventListener("click", playPrevSong);
  nextBtn.addEventListener("click", playNextSong);

  // N√∫t b·∫≠t/t·∫Øt repeat & shuffle
  repeatBtn.addEventListener("click", () => {
    isRepeat = !isRepeat;
    if (isRepeat) isShuffle = false; // Ch·ªâ b·∫≠t 1 trong 2
    updateButtons();
  });

  shuffleBtn.addEventListener("click", () => {
    isShuffle = !isShuffle;
    if (isShuffle) isRepeat = false; // Ch·ªâ b·∫≠t 1 trong 2
    updateButtons();
  });

  // Chuy·ªÉn b√†i k·∫ø ti·∫øp
  function playNextSong() {
    if (currentPlaylist.length === 0) return;
    if (isShuffle) {
      currentIndex = Math.floor(Math.random() * currentPlaylist.length);
    } else {
      currentIndex = (currentIndex + 1) % currentPlaylist.length;
    }
    playSong(currentIndex);
  }

  // Chuy·ªÉn b√†i tr∆∞·ªõc
  function playPrevSong() {
    if (currentPlaylist.length === 0) return;
    if (isShuffle) {
      currentIndex = Math.floor(Math.random() * currentPlaylist.length);
    } else {
      currentIndex =
        (currentIndex - 1 + currentPlaylist.length) % currentPlaylist.length;
    }
    playSong(currentIndex);
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t repeat v√† shuffle
  function updateButtons() {
    repeatBtn.classList.toggle("active", isRepeat);
    shuffleBtn.classList.toggle("active", isShuffle);
  }

  // C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh v√† th·ªùi gian
  musicPlayer.addEventListener("timeupdate", () => {
    const current = Math.floor(musicPlayer.currentTime);
    const total = Math.floor(musicPlayer.duration) || 0;

    progressBar.max = total;
    progressBar.value = current;

    currentTimeDisplay.textContent = formatTime(current);
    durationDisplay.textContent = formatTime(total);
  });

  // Khi ng∆∞·ªùi d√πng k√©o thanh ti·∫øn tr√¨nh
  progressBar.addEventListener("input", () => {
    musicPlayer.currentTime = progressBar.value;
  });

  // ƒê·ªãnh d·∫°ng th·ªùi gian mm:ss
  function formatTime(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? "0" : ""}${secs}`;
  }

  // N√∫t back quay l·∫°i m√†n h√¨nh tr∆∞·ªõc ƒë√≥
  backBtn.addEventListener("click", () => {
    const lastView = navigationStack.pop();
    if (!lastView) return;

    if (lastView.view === "main") {
      loadMainMenu();
    } else if (lastView.view === "category") {
      loadCategory(lastView.type, lastView.displayTitle);
    }
  });

  // V·∫Ω l√™n canvas volume
  canvas.addEventListener("mousedown", () => (isDrawing = true));
  canvas.addEventListener("mouseup", () => {
    isDrawing = false;
    updateVolume();
  });
  canvas.addEventListener("mouseleave", () => {
    if (isDrawing) {
      isDrawing = false;
      updateVolume();
    }
  });
  canvas.addEventListener("mousemove", draw);

  // N√∫t t·∫©y ho·∫∑c v·∫Ω tr√™n canvas
  eraserBtn.addEventListener("click", () => {
    erasing = !erasing;
    eraserBtn.textContent = erasing ? "üßΩ" : "‚úèÔ∏è";
  });

  // H√†m v·∫Ω l√™n canvas
  function draw(e) {
    if (!isDrawing) return;

    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    ctx.globalCompositeOperation = erasing ? "destination-out" : "source-over";
    ctx.fillStyle = "black";
    ctx.beginPath();
    ctx.arc(x, y, 5, 0, 2 * Math.PI);
    ctx.fill();
  }

  // C·∫≠p nh·∫≠t √¢m l∆∞·ª£ng nh·∫°c d·ª±a tr√™n l∆∞·ª£ng n√©t v·∫Ω tr√™n canvas
  function updateVolume() {
    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
    let filledPixels = 0;
    // Ki·ªÉm tra k√™nh alpha (ch·ªâ s·ªë 3,7,11,...)
    for (let i = 3; i < imageData.length; i += 4) {
      if (imageData[i] > 0) filledPixels++;
    }
    // T√≠nh ph·∫ßn trƒÉm v√πng ƒë∆∞·ª£c t√¥ (0 ‚Üí 1)
    const fillPercent = filledPixels / (canvas.width * canvas.height);
    // ƒê·∫∑t √¢m l∆∞·ª£ng ch√≠nh x√°c theo ph·∫ßn trƒÉm v√πng ƒë∆∞·ª£c t√¥
    musicPlayer.volume = Math.min(Math.max(fillPercent, 0), 1);
  }
  // Check role
  await checkUserRole();

  // Load menu ch√≠nh ban ƒë·∫ßu
  loadMainMenu();
});
